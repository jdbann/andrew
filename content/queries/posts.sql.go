// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: posts.sql

package queries

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (slug, title, summary, body)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, slug, title, summary, body, created_at
`

type CreatePostParams struct {
	Slug    string
	Title   string
	Summary string
	Body    string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Slug,
		arg.Title,
		arg.Summary,
		arg.Body,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Summary,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT
    id, slug, title, summary, body, created_at
FROM
    posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Summary,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
