// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: posts.sql

package queries

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (slug, title, summary, body)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, slug, title, summary, body, created_at
`

type CreatePostParams struct {
	Slug    string
	Title   string
	Summary string
	Body    string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Slug,
		arg.Title,
		arg.Summary,
		arg.Body,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Summary,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT
    id, slug, title, summary, body, created_at
FROM
    posts
WHERE
    slug = $1
LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Summary,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT
    id, slug, title, summary, body, created_at
FROM
    posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Summary,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedPost = `-- name: SeedPost :exec
INSERT INTO posts (slug, title, summary, body, created_at)
    VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (slug)
    DO UPDATE SET
        title = EXCLUDED.title, summary = EXCLUDED.summary, body = EXCLUDED.body, created_at = EXCLUDED.created_at
`

type SeedPostParams struct {
	Slug      string
	Title     string
	Summary   string
	Body      string
	CreatedAt time.Time
}

func (q *Queries) SeedPost(ctx context.Context, arg SeedPostParams) error {
	_, err := q.db.ExecContext(ctx, seedPost,
		arg.Slug,
		arg.Title,
		arg.Summary,
		arg.Body,
		arg.CreatedAt,
	)
	return err
}
